"use strict";(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[245],{9441:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-aa3c3c8e",path:"/note/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html",title:"webpack学习笔记",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"起步",slug:"起步",children:[{level:3,title:"基本安装",slug:"基本安装",children:[]},{level:3,title:"npm脚本",slug:"npm脚本",children:[]}]},{level:2,title:"管理资源",slug:"管理资源",children:[{level:3,title:"加载CSS",slug:"加载css",children:[]},{level:3,title:"加载图片",slug:"加载图片",children:[]},{level:3,title:"加载字体",slug:"加载字体",children:[]},{level:3,title:"加载数据",slug:"加载数据",children:[]},{level:3,title:"全局资源",slug:"全局资源",children:[]}]},{level:2,title:"管理输出",slug:"管理输出",children:[{level:3,title:"html-webpack-plugin",slug:"html-webpack-plugin",children:[]},{level:3,title:"clean-webpack-plugin",slug:"clean-webpack-plugin",children:[]}]},{level:2,title:"开发环境构建",slug:"开发环境构建",children:[{level:3,title:"使用 source map",slug:"使用-source-map",children:[]},{level:3,title:"选择一个开发工具",slug:"选择一个开发工具",children:[]},{level:3,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]}]},{level:2,title:"模块热更新",slug:"模块热更新",children:[]},{level:2,title:"tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"生产环境构建",slug:"生产环境构建",children:[{level:3,title:"配置",slug:"配置",children:[]},{level:3,title:"source map",slug:"source-map",children:[]},{level:3,title:"指定环境",slug:"指定环境",children:[]},{level:3,title:"split css",slug:"split-css",children:[]}]},{level:2,title:"代码分离",slug:"代码分离",children:[{level:3,title:"防止重复",slug:"防止重复",children:[]},{level:3,title:"bundle 分析(bundle analysis)",slug:"bundle-分析-bundle-analysis",children:[]}]},{level:2,title:"懒加载",slug:"懒加载",children:[]},{level:2,title:"解决缓存问题",slug:"解决缓存问题",children:[{level:3,title:"输出文件的文件名",slug:"输出文件的文件名",children:[]},{level:3,title:"模板标识符",slug:"模板标识符",children:[]}]},{level:2,title:"shimming",slug:"shimming",children:[]},{level:2,title:"渐进式网络应用程序",slug:"渐进式网络应用程序",children:[]},{level:2,title:"Typescript",slug:"typescript",children:[{level:3,title:"基础安装",slug:"基础安装",children:[]},{level:3,title:"Loader",slug:"loader",children:[]},{level:3,title:"source map",slug:"source-map-1",children:[]},{level:3,title:"使用第三方库",slug:"使用第三方库",children:[]},{level:3,title:"导入其他资源",slug:"导入其他资源",children:[]}]},{level:2,title:"使用环境变量",slug:"使用环境变量",children:[]},{level:2,title:"构建性能",slug:"构建性能",children:[]},{level:2,title:"常规",slug:"常规",children:[]},{level:2,title:"Development",slug:"development",children:[{level:3,title:"增量编译",slug:"增量编译",children:[]},{level:3,title:"在内存中编译",slug:"在内存中编译",children:[]},{level:3,title:"Devtool",slug:"devtool",children:[]},{level:3,title:"避免在生产环境下才会用到的工具",slug:"避免在生产环境下才会用到的工具",children:[]},{level:3,title:"最小化入口 chunk",slug:"最小化入口-chunk",children:[]}]},{level:2,title:"Production",slug:"production",children:[{level:3,title:"多个编译时",slug:"多个编译时",children:[]},{level:3,title:"Source Maps",slug:"source-maps",children:[]}]},{level:2,title:"工具相关问题",slug:"工具相关问题",children:[{level:3,title:"Babel",slug:"babel",children:[]},{level:3,title:"TypeScript",slug:"typescript-1",children:[]},{level:3,title:"Sass",slug:"sass",children:[]}]},{level:2,title:"集成",slug:"集成",children:[{level:3,title:"NPM Scripts",slug:"npm-scripts",children:[]},{level:3,title:"Grunt",slug:"grunt",children:[]},{level:3,title:"Gulp",slug:"gulp",children:[]}]}],filePathRelative:"note/webpack学习笔记.md",git:{updatedTime:1633942968e3,contributors:[{name:"YeSuX",email:"351490949@qq.com",commits:1}]}}},9998:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Ve});var e=a(6252);const p=(0,e.uE)('<h1 id="webpack学习笔记" tabindex="-1"><a class="header-anchor" href="#webpack学习笔记" aria-hidden="true">#</a> webpack学习笔记</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>安装最新版本或特定版本。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack\n<span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack@<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果你使用 webpack 4+ 版本，你还需要安装 CLI。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-cli\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>对于大多数项目，我们建议本地安装。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack.config.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="起步" tabindex="-1"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h2><p>webpack 用于编译 JavaScript 模块。</p><h3 id="基本安装" tabindex="-1"><a class="header-anchor" href="#基本安装" aria-hidden="true">#</a> 基本安装</h3><p>首先我们创建一个目录，初始化 npm，然后 在本地安装 webpack，接着安装 webpack-cli（此工具用于在命令行中运行 webpack）：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> webpack-demo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> webpack-demo\n<span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli --save-dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过script引用js的方式，去管理 JavaScript 项目会有一些问题：</p><ul><li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li><li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li><li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li></ul><blockquote><p><em>在安装一个要打包到生产环境的安装包时，你应该使用</em> <code>npm install --save</code><em>，如果你在安装一个用于开发环境的安装包（例如，linter, 测试库等），你应该使用</em> <code>npm install --save-dev</code><em>。</em></p></blockquote><h3 id="npm脚本" tabindex="-1"><a class="header-anchor" href="#npm脚本" aria-hidden="true">#</a> npm脚本</h3><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="管理资源" tabindex="-1"><a class="header-anchor" href="#管理资源" aria-hidden="true">#</a> 管理资源</h2><p>webpack 最出色的功能之一就是，除了 JavaScript，还可以通过 loader <em>引入任何其他类型的文件</em>。也就是说，以上列出的那些 JavaScript 的优点（例如显式依赖），同样可以用来构建网站或 web 应用程序中的所有非 JavaScript 内容。</p><h3 id="加载css" tabindex="-1"><a class="header-anchor" href="#加载css" aria-hidden="true">#</a> 加载CSS</h3><p><strong>安装loader</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev style-loader css-loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   module: {\n</span><span class="token prefix inserted">+</span><span class="token line">     rules: [\n</span><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.css$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;style-loader&#39;,\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;css-loader&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">         ]\n</span><span class="token prefix inserted">+</span><span class="token line">       }\n</span><span class="token prefix inserted">+</span><span class="token line">     ]\n</span><span class="token prefix inserted">+</span><span class="token line">   }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><blockquote><p><em>webpack 根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的 loader。在这种情况下，以</em> <code>.css</code> <em>结尾的全部文件，都将被提供给</em> <code>style-loader</code> <em>和</em> <code>css-loader</code><em>。</em></p></blockquote><p>这使你可以在依赖于此样式的文件中 <code>import &#39;./style.css&#39;</code>。现在，当该模块运行时，含有 CSS 字符串的 <code>&lt;style&gt;</code> 标签，将被插入到 html 文件的 <code>&lt;head&gt;</code> 中。</p><h3 id="加载图片" tabindex="-1"><a class="header-anchor" href="#加载图片" aria-hidden="true">#</a> 加载图片</h3><p>安装loader</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev file-loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">       {\n</span><span class="token prefix unchanged"> </span><span class="token line">         test: /\\.css$/,\n</span><span class="token prefix unchanged"> </span><span class="token line">         use: [\n</span><span class="token prefix unchanged"> </span><span class="token line">           &#39;style-loader&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">           &#39;css-loader&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">         ]\n</span><span class="token prefix unchanged"> </span><span class="token line">       },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.(png|svg|jpg|gif)$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;file-loader&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">         ]\n</span><span class="token prefix inserted">+</span><span class="token line">       }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     ]\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',31),l=(0,e._)("em",null,"合乎逻辑下一步是，压缩和优化你的图像。查看",-1),c=(0,e.Uk)(),r={href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("image-webpack-loader"),i=(0,e.Uk)(),o=(0,e._)("em",null,"和",-1),u=(0,e.Uk)(),d={href:"https://www.webpackjs.com/loaders/url-loader",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("url-loader"),b=(0,e._)("em",null,"，以了解更多关于如果增强加载处理图片功能。",-1),m=(0,e.uE)('<h3 id="加载字体" tabindex="-1"><a class="header-anchor" href="#加载字体" aria-hidden="true">#</a> 加载字体</h3><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.(woff|woff2|eot|ttf|otf)$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;file-loader&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">         ]\n</span><span class="token prefix inserted">+</span><span class="token line">       }\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> @font-face {\n</span><span class="token prefix inserted">+</span><span class="token line">   font-family: &#39;MyFont&#39;;\n</span><span class="token prefix inserted">+</span><span class="token line">   src:  url(&#39;./my-font.woff2&#39;) format(&#39;woff2&#39;),\n</span><span class="token prefix inserted">+</span><span class="token line">         url(&#39;./my-font.woff&#39;) format(&#39;woff&#39;);\n</span><span class="token prefix inserted">+</span><span class="token line">   font-weight: 600;\n</span><span class="token prefix inserted">+</span><span class="token line">   font-style: normal;\n</span><span class="token prefix inserted">+</span><span class="token line"> }\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> .hello {\n</span><span class="token prefix unchanged"> </span><span class="token line">   color: red;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   font-family: &#39;MyFont&#39;;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   background: url(&#39;./icon.png&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="加载数据" tabindex="-1"><a class="header-anchor" href="#加载数据" aria-hidden="true">#</a> 加载数据</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev csv-loader xml-loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.(csv|tsv)$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;csv-loader&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">         ]\n</span><span class="token prefix inserted">+</span><span class="token line">       },\n</span><span class="token prefix inserted">+</span><span class="token line">       {\n</span><span class="token prefix inserted">+</span><span class="token line">         test: /\\.xml$/,\n</span><span class="token prefix inserted">+</span><span class="token line">         use: [\n</span><span class="token prefix inserted">+</span><span class="token line">           &#39;xml-loader&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">         ]\n</span><span class="token prefix inserted">+</span><span class="token line">       }\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="全局资源" tabindex="-1"><a class="header-anchor" href="#全局资源" aria-hidden="true">#</a> 全局资源</h3><p>上述所有内容中最出色之处是，以这种方式加载资源，你可以以<strong>更直观的方式将模块和资源组合在一起</strong>。无需依赖于含有全部资源的 <code>/assets</code> 目录，而是将资源与代码组合在一起。例如，类似这样的结构会非常有用：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- /assets\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |– /components\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |– /my-component\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.jsx\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– index.css\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– icon.svg\n</span><span class="token prefix inserted">+</span><span class="token line"> |  |  |– img.png\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这种配置方式会使你的代码更<strong>具备可移植性</strong>，因为现有的统一放置的方式会造成所有资源紧密耦合在一起。假如你想在另一个项目中使用 <code>/my-component</code>，只需将其复制或移动到 <code>/components</code> 目录下。只要你已经安装了任何<em>扩展依赖(external dependencies)</em>，并且你<em>已经在配置中定义过相同的 loader</em>，那么项目应该能够良好运行。</p><h2 id="管理输出" tabindex="-1"><a class="header-anchor" href="#管理输出" aria-hidden="true">#</a> 管理输出</h2><h3 id="html-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#html-webpack-plugin" aria-hidden="true">#</a> html-webpack-plugin</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev html-webpack-plugin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     print: &#39;./src/print.js&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   plugins: [\n</span><span class="token prefix inserted">+</span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       title: &#39;Output Management&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">     })\n</span><span class="token prefix inserted">+</span><span class="token line">   ],\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>HtmlWebpackPlugin</code> 创建了一个全新的文件，所有的 bundle 会自动添加到 html 中。</p>',15),h=(0,e.Uk)("如果你想要了解更多 "),g=(0,e._)("code",null,"HtmlWebpackPlugin",-1),f=(0,e.Uk)(" 插件提供的全部功能和选项，那么你就应该多多熟悉 "),x={href:"https://github.com/jantimon/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},v=(0,e._)("code",null,"HtmlWebpackPlugin",-1),w=(0,e.Uk)(" 仓库。"),_=(0,e.Uk)("你还可以看一下 "),q={href:"https://github.com/jaketrent/html-webpack-template",target:"_blank",rel:"noopener noreferrer"},U=(0,e._)("code",null,"html-webpack-template",-1),j=(0,e.Uk)("，除了默认模板之外，还提供了一些额外的功能。"),y=(0,e.uE)('<h3 id="clean-webpack-plugin" tabindex="-1"><a class="header-anchor" href="#clean-webpack-plugin" aria-hidden="true">#</a> clean-webpack-plugin</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> clean-webpack-plugin --save-dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const {CleanWebpackPlugin} = require(&#39;clean-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     print: &#39;./src/print.js&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new CleanWebpackPlugin(),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Output Management&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     })\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通常，clean-webpack-plugin会在每次构建前清理 <code>/dist</code> 文件夹。</p><h2 id="开发环境构建" tabindex="-1"><a class="header-anchor" href="#开发环境构建" aria-hidden="true">#</a> 开发环境构建</h2><h3 id="使用-source-map" tabindex="-1"><a class="header-anchor" href="#使用-source-map" aria-hidden="true">#</a> 使用 source map</h3>',6),W=(0,e.Uk)("为了更容易地追踪错误和警告，JavaScript 提供了 "),C={href:"http://blog.teamtreehouse.com/introduction-source-maps",target:"_blank",rel:"noopener noreferrer"},P=(0,e.Uk)("source map"),S=(0,e.Uk)(" 功能，将编译后的代码映射回原始源代码。如果一个错误来自于 "),E=(0,e._)("code",null,"b.js",-1),H=(0,e.Uk)("，source map 就会明确的告诉你。"),M=(0,e.Uk)("source map 有很多"),J={href:"https://www.webpackjs.com/configuration/devtool",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("不同的选项"),N=(0,e.Uk)("可用，请务必仔细阅读它们，以便可以根据需要进行配置。"),D=(0,e.uE)('<p>对于本指南，我们使用 <code>inline-source-map</code> 选项，这有助于解释说明我们的目的（仅解释说明，不要用于生产环境）：</p><p><strong>webpack.config.js</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     print: &#39;./src/print.js&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: &#39;inline-source-map&#39;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin([&#39;dist&#39;]),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Development&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     })\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="选择一个开发工具" tabindex="-1"><a class="header-anchor" href="#选择一个开发工具" aria-hidden="true">#</a> 选择一个开发工具</h3><p>webpack 中有几个不同的选项，可以帮助你在代码发生变化后自动编译代码：</p><ol><li>webpack&#39;s Watch Mode</li><li>webpack-dev-server</li><li>webpack-dev-middleware</li></ol><p>多数场景中，你可能需要使用 <code>webpack-dev-server</code>，但是不妨探讨一下以上的所有选项。</p><h3 id="使用-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#使用-webpack-dev-server" aria-hidden="true">#</a> 使用 webpack-dev-server</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-dev-server\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     app: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     print: &#39;./src/print.js&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: &#39;inline-source-map&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devServer: {},\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin([&#39;dist&#39;]),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Development&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     })\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>&quot;scripts&quot;: {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;watch&quot;: &quot;webpack --watch&quot;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &quot;build&quot;: &quot;webpack&quot;\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',11),O=(0,e._)("code",null,"webpack-dev-server",-1),A=(0,e.Uk)(" 带有许多可配置的选项。转到"),z={href:"https://www.webpackjs.com/configuration/dev-server",target:"_blank",rel:"noopener noreferrer"},G=(0,e.Uk)("相关文档"),$=(0,e.Uk)("以了解更多。"),L=(0,e._)("h2",{id:"模块热更新",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#模块热更新","aria-hidden":"true"},"#"),(0,e.Uk)(" 模块热更新")],-1),I=(0,e.Uk)("启用此功能实际上相当简单。而我们要做的，就是更新 "),B={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("webpack-dev-server"),R=(0,e.Uk)(" 的配置，和使用 webpack 内置的 HMR 插件。"),V=(0,e.uE)('<div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const webpack = require(&#39;webpack&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">      app: &#39;./src/index.js&#39;,\n</span><span class="token prefix deleted">-</span><span class="token line">      print: &#39;./src/print.js&#39;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      app: &#39;./src/index.js&#39;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   devtool: &#39;inline-source-map&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   devServer: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     contentBase: &#39;./dist&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     hot: true\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin([&#39;dist&#39;]),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Hot Module Replacement&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.NamedModulesPlugin(),\n</span><span class="token prefix inserted">+</span><span class="token line">     new webpack.HotModuleReplacementPlugin()\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>注意，我们还添加了 <code>NamedModulesPlugin</code>，以便更容易查看要修补(patch)的依赖。</p><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree shaking</h2><p>为了学会使用 <em>tree shaking</em>，你必须……</p><ul><li><p>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）。</p></li><li><p>在项目 <code>package.json</code> 文件中，添加一个 &quot;sideEffects&quot; 入口。</p><ul><li><p>如同上面提到的，如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 <code>false</code>，来告知 webpack，它可以安全地删除未用到的 export 导出。</p><blockquote><p>「副作用」的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。举例说明，例如 polyfill，它影响全局作用域，并且通常不提供 export。</p></blockquote><p>如果你的代码确实有一些副作用，那么可以改为提供一个数组</p><blockquote><p><em>注意，任何导入的文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似</em> <code>css-loader</code> <em>并导入 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：</em></p></blockquote></li></ul></li><li><p>引入一个能够删除未引用代码(dead code)的压缩工具(minifier)（例如 <code>UglifyJSPlugin</code>）。</p></li></ul><h2 id="生产环境构建" tabindex="-1"><a class="header-anchor" href="#生产环境构建" aria-hidden="true">#</a> 生产环境构建</h2><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p><em>开发环境(development)<em>和</em>生产环境(production)<em>的构建目标差异很大。在</em>开发环境</em>中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。而在<em>生产环境</em>中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写<strong>彼此独立的 webpack 配置</strong>。</p>',8),Y=(0,e.Uk)("虽然，以上我们将"),X=(0,e._)("em",null,"生产环境",-1),Q=(0,e.Uk)("和"),K=(0,e._)("em",null,"开发环境",-1),Z=(0,e.Uk)("做了略微区分，但是，请注意，我们还是会遵循不重复原则(Don't repeat yourself - DRY)，保留一个“通用”配置。为了将这些配置合并在一起，我们将使用一个名为 "),nn={href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"},sn=(0,e._)("code",null,"webpack-merge",-1),an=(0,e.Uk)("nt-specific)的配置中重复代码。"),en=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-merge\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.common.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.dev.js\n</span><span class="token prefix inserted">+</span><span class="token line"> |- webpack.prod.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- math.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;name&quot;: &quot;development&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;version&quot;: &quot;1.0.0&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;description&quot;: &quot;&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;main&quot;: &quot;webpack.config.js&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;scripts&quot;: {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     &quot;start&quot;: &quot;webpack-dev-server --open&quot;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     &quot;build&quot;: &quot;webpack&quot;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;keywords&quot;: [],\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;author&quot;: &quot;&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;license&quot;: &quot;ISC&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;devDependencies&quot;: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;clean-webpack-plugin&quot;: &quot;^0.1.17&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;css-loader&quot;: &quot;^0.28.4&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;csv-loader&quot;: &quot;^2.1.1&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;express&quot;: &quot;^4.15.3&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;file-loader&quot;: &quot;^0.11.2&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;html-webpack-plugin&quot;: &quot;^2.29.0&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;style-loader&quot;: &quot;^0.18.2&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;webpack&quot;: &quot;^3.0.0&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;webpack-dev-middleware&quot;: &quot;^1.12.0&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;webpack-merge&quot;: &quot;^4.1.0&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;xml-loader&quot;: &quot;^1.2.1&quot;\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="source-map" tabindex="-1"><a class="header-anchor" href="#source-map" aria-hidden="true">#</a> source map</h3>',4),pn=(0,e.Uk)("我们鼓励你在生产环境中启用 source map，因为它们对调试源码(debug)和运行基准测试(benchmark tests)很有帮助。虽然有如此强大的功能，然而还是应该针对生成环境用途，选择一个构建快速的推荐配置（具体细节请查看 "),ln={href:"https://www.webpackjs.com/configuration/devtool",target:"_blank",rel:"noopener noreferrer"},cn=(0,e._)("code",null,"devtool",-1),rn=(0,e.Uk)("将在"),tn=(0,e._)("em",null,"生产环境",-1),on=(0,e.Uk)("中使用 "),un=(0,e._)("code",null,"source-map",-1),dn=(0,e.Uk)(" 选项，而不是我们在"),kn=(0,e._)("em",null,"开发环境",-1),bn=(0,e.Uk)("中用到的 "),mn=(0,e._)("code",null,"inline-source-map",-1),hn=(0,e.Uk)("："),gn=(0,e.uE)('<div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const merge = require(&#39;webpack-merge&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const UglifyJSPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const common = require(&#39;./webpack.common.js&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = merge(common, {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: &#39;source-map&#39;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     new UglifyJSPlugin()\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new UglifyJSPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       sourceMap: true\n</span><span class="token prefix inserted">+</span><span class="token line">     })\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]\n</span><span class="token prefix unchanged"> </span><span class="token line"> });\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>避免在生产中使用 <code>inline-***</code> 和 <code>eval-***</code>，因为它们可以增加 bundle 大小，并降低整体性能。</p></blockquote><h3 id="指定环境" tabindex="-1"><a class="header-anchor" href="#指定环境" aria-hidden="true">#</a> 指定环境</h3><p>许多 library 将通过与 <code>process.env.NODE_ENV</code> 环境变量关联，以决定 library 中应该引用哪些内容。例如，当不处于<em>生产环境</em>中时，某些 library 为了使调试变得容易，可能会添加额外的日志记录(log)和测试(test)。其实，当使用 <code>process.env.NODE_ENV === &#39;production&#39;</code> 时，一些 library 可能针对具体用户的环境进行代码优化，从而删除或添加一些重要代码。</p><h3 id="split-css" tabindex="-1"><a class="header-anchor" href="#split-css" aria-hidden="true">#</a> split css</h3>',5),fn=(0,e.Uk)("正如在"),xn=(0,e._)("strong",null,"管理资源",-1),vn=(0,e.Uk)("中最后的 "),wn={href:"https://www.webpackjs.com/guides/asset-management#loading-css",target:"_blank",rel:"noopener noreferrer"},_n=(0,e.Uk)("加载 CSS"),qn=(0,e.Uk)(" 小节中所提到的，通常最好的做法是使用 "),Un=(0,e._)("code",null,"ExtractTextPlugin",-1),jn=(0,e.Uk)(" 将 CSS 分离成单独的文件。在插件"),yn={href:"https://www.webpackjs.com/plugins/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Wn=(0,e.Uk)("文档"),Cn=(0,e.Uk)("中有一些很好的实现例子。"),Pn=(0,e._)("code",null,"disable",-1),Sn=(0,e.Uk)(" 选项可以和 "),En=(0,e._)("code",null,"--env",-1),Hn=(0,e.Uk)(" 标记结合使用，以允许在开发中进行内联加载，推荐用于热模块替换和构建速度。"),Mn=(0,e._)("h2",{id:"代码分离",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#代码分离","aria-hidden":"true"},"#"),(0,e.Uk)(" 代码分离")],-1),Jn=(0,e._)("p",null,"代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。",-1),Tn=(0,e._)("p",null,"有三种常用的代码分离方法：",-1),Nn=(0,e.Uk)("入口起点：使用 "),Dn={href:"https://www.webpackjs.com/configuration/entry-context",target:"_blank",rel:"noopener noreferrer"},On=(0,e._)("code",null,"entry",-1),An=(0,e.Uk)(" 配置手动地分离代码。"),zn=(0,e.Uk)("防止重复：使用 "),Gn={href:"https://www.webpackjs.com/plugins/commons-chunk-plugin",target:"_blank",rel:"noopener noreferrer"},$n=(0,e._)("code",null,"CommonsChunkPlugin",-1),Ln=(0,e.Uk)(" 去重和分离 chunk。"),In=(0,e._)("li",null,"动态导入：通过模块的内联函数调用来分离代码。",-1),Bn=(0,e.uE)('<h3 id="防止重复" tabindex="-1"><a class="header-anchor" href="#防止重复" aria-hidden="true">#</a> 防止重复</h3><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>const path = require(&#39;path&#39;);\nconst HTMLWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n\nmodule.exports = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   index: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   another: &#39;./src/another-module.js&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span><span class="token prefix unchanged"> </span><span class="token line"> plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">   new HTMLWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">     title: &#39;Code Splitting&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">   }),\n</span><span class="token prefix unchanged"> </span><span class="token line"> ],\n</span><span class="token prefix unchanged"> </span><span class="token line"> output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">   filename: &#39;[name].bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">   path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line"> },\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> optimization:{\n</span><span class="token prefix inserted">+</span><span class="token line">    runtimeChunk:{\n</span><span class="token prefix inserted">+</span><span class="token line">      name:&#39;common&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">    }\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>以下是由社区提供的，一些对于代码分离很有帮助的插件和 loaders：</p>',3),Fn={href:"https://www.webpackjs.com/plugins/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Rn=(0,e._)("code",null,"ExtractTextPlugin",-1),Vn=(0,e.Uk)(": 用于将 CSS 从主应用程序中分离。"),Yn={href:"https://www.webpackjs.com/loaders/bundle-loader",target:"_blank",rel:"noopener noreferrer"},Xn=(0,e._)("code",null,"bundle-loader",-1),Qn=(0,e.Uk)(": 用于分离代码和延迟加载生成的 bundle。"),Kn={href:"https://github.com/gaearon/promise-loader",target:"_blank",rel:"noopener noreferrer"},Zn=(0,e._)("code",null,"promise-loader",-1),ns=(0,e.Uk)(": 类似于 "),ss=(0,e._)("code",null,"bundle-loader",-1),as=(0,e.Uk)(" ，但是使用的是 promises。"),es={href:"https://www.webpackjs.com/plugins/commons-chunk-plugin",target:"_blank",rel:"noopener noreferrer"},ps=(0,e._)("code",null,"CommonsChunkPlugin",-1),ls=(0,e.Uk)(" 插件还可以通过使用"),cs={href:"https://www.webpackjs.com/plugins/commons-chunk-plugin/#explicit-vendor-chunk",target:"_blank",rel:"noopener noreferrer"},rs=(0,e.Uk)("显式的 vendor chunks"),ts=(0,e.Uk)(" 功能，从应用程序代码中分离 vendor 模块。"),is=(0,e._)("h3",{id:"bundle-分析-bundle-analysis",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#bundle-分析-bundle-analysis","aria-hidden":"true"},"#"),(0,e.Uk)(" bundle 分析(bundle analysis)")],-1),os=(0,e.Uk)("如果我们以分离代码作为开始，那么就以检查模块作为结束，分析输出结果是很有用处的。"),us={href:"https://github.com/webpack/analyse",target:"_blank",rel:"noopener noreferrer"},ds=(0,e.Uk)("官方分析工具"),ks=(0,e.Uk)(" 是一个好的初始选择。下面是一些社区支持(community-supported)的可选工具："),bs={href:"https://alexkuz.github.io/webpack-chart/",target:"_blank",rel:"noopener noreferrer"},ms=(0,e.Uk)("webpack-chart"),hs=(0,e.Uk)(": webpack 数据交互饼图。"),gs={href:"https://chrisbateman.github.io/webpack-visualizer/",target:"_blank",rel:"noopener noreferrer"},fs=(0,e.Uk)("webpack-visualizer"),xs=(0,e.Uk)(": 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。"),vs={href:"https://github.com/webpack-contrib/webpack-bundle-analyzer",target:"_blank",rel:"noopener noreferrer"},ws=(0,e.Uk)("webpack-bundle-analyzer"),_s=(0,e.Uk)(": 一款分析 bundle 内容的插件及 CLI 工具，以便捷的、交互式、可缩放的树状图形式展现给用户。"),qs=(0,e.uE)('<h2 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h2><p>懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。</p><p><strong>适用场景为含用户交互的场景，若不需要用户的交互——每次加载页面的时候会请求它，这样做并没有什么好处。</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import _ from &#39;lodash&#39;;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> async function getComponent() {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function component() {\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   var element = document.createElement(&#39;div&#39;);\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   const _ = await import(/* webpackChunkName: &quot;lodash&quot; */ &#39;lodash&#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   var button = document.createElement(&#39;button&#39;);\n</span><span class="token prefix inserted">+</span><span class="token line">   var br = document.createElement(&#39;br&#39;);\n</span></span>\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   button.innerHTML = &#39;Click me and look at the console!&#39;;\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   element.innerHTML = _.join([&#39;Hello&#39;, &#39;webpack&#39;], &#39; &#39;);\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   element.appendChild(br);\n</span><span class="token prefix inserted">+</span><span class="token line">   element.appendChild(button);\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">   // Note that because a network request is involved, some indication\n</span><span class="token prefix inserted">+</span><span class="token line">   // of loading would need to be shown in a production-level site/app.\n</span><span class="token prefix inserted">+</span><span class="token line">   button.onclick = e =&gt; import(/* webpackChunkName: &quot;print&quot; */ &#39;./print&#39;).then(module =&gt; {\n</span><span class="token prefix inserted">+</span><span class="token line">     var print = module.default;\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span><span class="token prefix inserted">+</span><span class="token line">     print();\n</span><span class="token prefix inserted">+</span><span class="token line">   });\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return element;\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> getComponent().then(component =&gt; {\n</span><span class="token prefix deleted">-</span><span class="token line">   document.body.appendChild(component);\n</span><span class="token prefix deleted">-</span><span class="token line"> });\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> document.body.appendChild(component());\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="解决缓存问题" tabindex="-1"><a class="header-anchor" href="#解决缓存问题" aria-hidden="true">#</a> 解决缓存问题</h2>',5),Us=(0,e.Uk)("我们使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的 "),js=(0,e._)("code",null,"/dist",-1),ys=(0,e.Uk)(" 目录，然后把打包后的内容放置在此目录中。只要 "),Ws=(0,e._)("code",null,"/dist",-1),Cs=(0,e.Uk)(" 目录中的内容部署到服务器上，客户端（通常是浏览器）就能够访问网站此服务器的网站及其资源。而最后一步获取资源是比较耗费时间的，这就是为什么浏览器使用一种名为 "),Ps={href:"https://searchstorage.techtarget.com/definition/cache",target:"_blank",rel:"noopener noreferrer"},Ss=(0,e.Uk)("缓存"),Es=(0,e.Uk)(" 的技术。可以通过命中缓存，以降低网络流量，使网站加载速度更快，然而，"),Hs=(0,e._)("strong",null,"如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。",-1),Ms=(0,e.uE)('<h3 id="输出文件的文件名" tabindex="-1"><a class="header-anchor" href="#输出文件的文件名" aria-hidden="true">#</a> 输出文件的文件名</h3><p>将第三方库(library)（例如 <code>lodash</code> 或 <code>react</code>）提取到单独的 <code>vendor</code> chunk 文件中，是比较推荐的做法，这是因为，它们很少像本地的源代码那样频繁修改。因此通过实现以上步骤，利用客户端的长效缓存机制，可以通过命中缓存来消除请求，并减少向服务器获取资源，同时还能保证客户端代码和服务器端代码版本一致。这可以通过使用新的 <code>entry(入口)</code> 起点，以及再额外配置一个 <code>CommonsChunkPlugin</code> 实例的组合方式来实现：</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> var path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const webpack = require(&#39;webpack&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   entry: &#39;./src/index.js&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   entry: {\n</span><span class="token prefix inserted">+</span><span class="token line">     main: &#39;./src/index.js&#39;,\n</span><span class="token prefix inserted">+</span><span class="token line">     vendor: [\n</span><span class="token prefix inserted">+</span><span class="token line">       &#39;lodash&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">     ]\n</span><span class="token prefix inserted">+</span><span class="token line">   },\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin([&#39;dist&#39;]),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Caching&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix inserted">+</span><span class="token line">       name: &#39;vendor&#39;\n</span><span class="token prefix inserted">+</span><span class="token line">     }),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       name: &#39;manifest&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     })\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].[chunkhash].js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="模板标识符" tabindex="-1"><a class="header-anchor" href="#模板标识符" aria-hidden="true">#</a> 模板标识符</h3>',4),Js=(0,e.Uk)("选择是使用 "),Ts={href:"https://www.webpackjs.com/plugins/hashed-module-ids-plugin",target:"_blank",rel:"noopener noreferrer"},Ns=(0,e._)("code",null,"HashedModuleIdsPlugin",-1),Ds=(0,e.uE)('<div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const webpack = require(&#39;webpack&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const CleanWebpackPlugin = require(&#39;clean-webpack-plugin&#39;);\n</span><span class="token prefix unchanged"> </span><span class="token line"> const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     main: &#39;./src/index.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     vendor: [\n</span><span class="token prefix unchanged"> </span><span class="token line">       &#39;lodash&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     ]\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">     new CleanWebpackPlugin([&#39;dist&#39;]),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new HtmlWebpackPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       title: &#39;Caching&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     new webpack.HashedModuleIdsPlugin(),\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       name: &#39;vendor&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     }),\n</span><span class="token prefix unchanged"> </span><span class="token line">     new webpack.optimize.CommonsChunkPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">       name: &#39;manifest&#39;\n</span><span class="token prefix unchanged"> </span><span class="token line">     })\n</span><span class="token prefix unchanged"> </span><span class="token line">   ],\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;[name].[chunkhash].js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="shimming" tabindex="-1"><a class="header-anchor" href="#shimming" aria-hidden="true">#</a> shimming</h2><p><code>webpack</code> 编译器(compiler)能够识别遵循 ES2015 模块语法、CommonJS 或 AMD 规范编写的模块。然而，一些第三方的库(library)可能会引用一些全局依赖（例如 <code>jQuery</code> 中的 <code>$</code>）。这些库也可能创建一些需要被导出的全局变量。这些“不符合规范的模块”就是 <em>shimming</em> 发挥作用的地方。</p><blockquote><p>**我们不推荐使用全局的东西！**在 webpack 背后的整个概念是让前端开发更加模块化。也就是说，需要编写具有良好的封闭性(well contained)、彼此隔离的模块，以及不要依赖于那些隐含的依赖模块（例如，全局变量）。请只在必要的时候才使用本文所述的这些特性。</p></blockquote><h2 id="渐进式网络应用程序" tabindex="-1"><a class="header-anchor" href="#渐进式网络应用程序" aria-hidden="true">#</a> 渐进式网络应用程序</h2>',5),Os=(0,e.Uk)("渐进式网络应用程序(Progressive Web Application - PWA)，是一种可以提供类似于原生应用程序(native app)体验的网络应用程序(web app)。PWA 可以用来做很多事。其中最重要的是，在**离线(offline)**时应用程序能够继续运行功能。这是通过使用名为 "),As={href:"https://developers.google.com/web/fundamentals/primers/service-workers/",target:"_blank",rel:"noopener noreferrer"},zs=(0,e.Uk)("Service Workers"),Gs=(0,e.Uk)(" 的网络技术来实现的。"),$s=(0,e.Uk)("本章将重点介绍，如何为我们的应用程序添加离线体验。我们将使用名为 "),Ls={href:"https://github.com/GoogleChrome/workbox",target:"_blank",rel:"noopener noreferrer"},Is=(0,e.Uk)("Workbox"),Bs=(0,e.Uk)(" 的 Google 项目来实现此目的，该项目提供的工具可帮助我们更轻松地配置 web app 的离线支持。"),Fs=(0,e._)("h2",{id:"typescript",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),(0,e.Uk)(" Typescript")],-1),Rs={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},Vs=(0,e.Uk)("TypeScript"),Ys=(0,e.Uk)(" 是 JavaScript 的超集，为其增加了类型系统，可以编译为普通的 JavaScript 代码。这篇指南里我们将会学习 webpack 是如何跟 TypeScript 进行集成。"),Xs=(0,e.uE)('<h3 id="基础安装" tabindex="-1"><a class="header-anchor" href="#基础安装" aria-hidden="true">#</a> 基础安装</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev typescript ts-loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>project</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- tsconfig.json\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- webpack.config.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- bundle.js\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   |- index.ts\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /node_modules\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>tsconfig.json</strong></p><p>这里我们设置一个基本的配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">&#39;./src/index.ts&#39;</span><span class="token punctuation">,</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.tsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;.tsx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="loader" tabindex="-1"><a class="header-anchor" href="#loader" aria-hidden="true">#</a> Loader</h3>',10),Qs={href:"https://github.com/TypeStrong/ts-loader",target:"_blank",rel:"noopener noreferrer"},Ks=(0,e._)("code",null,"ts-loader",-1),Zs=(0,e.uE)('<p>在本指南中，我们使用 <code>ts-loader</code>，因为它能够很方便地启用额外的 webpack 功能，例如将其他 web 资源导入到项目中。</p><h3 id="source-map-1" tabindex="-1"><a class="header-anchor" href="#source-map-1" aria-hidden="true">#</a> source map</h3><p>要启用 source map，我们必须配置 TypeScript，以将内联的 source map 输出到编译过的 JavaScript 文件。必须在 TypeScript 配置中添加下面这行：</p><p><strong>tsconfig.json</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> {\n</span><span class="token prefix unchanged"> </span><span class="token line">   &quot;compilerOptions&quot;: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;outDir&quot;: &quot;./dist/&quot;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     &quot;sourceMap&quot;: true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &quot;noImplicitAny&quot;: true,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;module&quot;: &quot;commonjs&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;target&quot;: &quot;es5&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;jsx&quot;: &quot;react&quot;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     &quot;allowJs&quot;: true\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> }\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>webpack.config.js</strong></p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const path = require(&#39;path&#39;);\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> module.exports = {\n</span><span class="token prefix unchanged"> </span><span class="token line">   entry: &#39;./src/index.ts&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   devtool: &#39;inline-source-map&#39;,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   module: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     rules: [\n</span><span class="token prefix unchanged"> </span><span class="token line">       {\n</span><span class="token prefix unchanged"> </span><span class="token line">         test: /\\.tsx?$/,\n</span><span class="token prefix unchanged"> </span><span class="token line">         use: &#39;ts-loader&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">         exclude: /node_modules/\n</span><span class="token prefix unchanged"> </span><span class="token line">       }\n</span><span class="token prefix unchanged"> </span><span class="token line">     ]\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   resolve: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     extensions: [ &#39;.tsx&#39;, &#39;.ts&#39;, &#39;.js&#39; ]\n</span><span class="token prefix unchanged"> </span><span class="token line">   },\n</span><span class="token prefix unchanged"> </span><span class="token line">   output: {\n</span><span class="token prefix unchanged"> </span><span class="token line">     filename: &#39;bundle.js&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">     path: path.resolve(__dirname, &#39;dist&#39;)\n</span><span class="token prefix unchanged"> </span><span class="token line">   }\n</span><span class="token prefix unchanged"> </span><span class="token line"> };\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="使用第三方库" tabindex="-1"><a class="header-anchor" href="#使用第三方库" aria-hidden="true">#</a> 使用第三方库</h3>',8),na=(0,e.Uk)("当从 npm 安装第三方库时，一定要牢记同时安装这个库的类型声明文件。你可以从 "),sa={href:"http://microsoft.github.io/TypeSearch/",target:"_blank",rel:"noopener noreferrer"},aa=(0,e.Uk)("TypeSearch"),ea=(0,e.Uk)(" 中找到并安装这些第三方库的类型声明文件。"),pa=(0,e.uE)('<h3 id="导入其他资源" tabindex="-1"><a class="header-anchor" href="#导入其他资源" aria-hidden="true">#</a> 导入其他资源</h3><p>要在 TypeScript 里使用非代码资源，我们需要告诉 TypeScript 如何兼容这些导入类型。那么首先，我们需要在项目里创建 <code>custom.d.ts</code> 文件，这个文件用来编写自定义的类型声明。让我们将 <code>.svg</code> 文件进行声明设置：</p><p><strong>custom.d.ts</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&quot;*.svg&quot;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> content<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里，我们通过指定任何以 <code>.svg</code> 结尾的导入，并将模块的 <code>content</code> 定义为 <code>any</code>，将 SVG 声明一个新的模块。我们可以通过将类型定义为字符串，来更加显式地将它声明为一个 url。同样的理念适用于其他资源，包括 CSS, SCSS, JSON 等。</p><h2 id="使用环境变量" tabindex="-1"><a class="header-anchor" href="#使用环境变量" aria-hidden="true">#</a> 使用环境变量</h2>',6),la=(0,e.Uk)("webpack 命令行"),ca={href:"https://www.webpackjs.com/api/cli/#environment-options",target:"_blank",rel:"noopener noreferrer"},ra=(0,e.Uk)("环境配置"),ta=(0,e.Uk)("中，通过设置 "),ia=(0,e._)("code",null,"--env",-1),oa=(0,e.Uk)(" 可以使你根据需要，传入尽可能多的环境变量。在 "),ua=(0,e._)("code",null,"webpack.config.js",-1),da=(0,e.Uk)(" 文件中可以访问到这些环境变量。例如，"),ka=(0,e._)("code",null,"--env.production",-1),ba=(0,e.Uk)(" 或 "),ma=(0,e._)("code",null,"--env.NODE_ENV=local",-1),ha=(0,e.Uk)("。"),ga=(0,e._)("h2",{id:"构建性能",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#构建性能","aria-hidden":"true"},"#"),(0,e.Uk)(" 构建性能")],-1),fa=(0,e._)("h2",{id:"常规",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#常规","aria-hidden":"true"},"#"),(0,e.Uk)(" 常规")],-1),xa=(0,e.Uk)("无论你正在 "),va={href:"https://www.webpackjs.com/guides/development",target:"_blank",rel:"noopener noreferrer"},wa=(0,e.Uk)("development"),_a=(0,e.Uk)(" 或构建 "),qa={href:"https://www.webpackjs.com/guides/production",target:"_blank",rel:"noopener noreferrer"},Ua=(0,e.Uk)("production"),ja=(0,e.Uk)("，以下做法应该帮助到你达到最佳。"),ya=(0,e.uE)('<h4 id="保持版本最新" tabindex="-1"><a class="header-anchor" href="#保持版本最新" aria-hidden="true">#</a> 保持版本最新</h4><h4 id="loaders" tabindex="-1"><a class="header-anchor" href="#loaders" aria-hidden="true">#</a> Loaders</h4><p>将 loaders 应用于最少数的必要模块中。而不是:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  loader<span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用 <code>include</code> 字段仅将 loader 模块应用在实际需要用其转换的位置中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n  include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  loader<span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="bootstrap" tabindex="-1"><a class="header-anchor" href="#bootstrap" aria-hidden="true">#</a> Bootstrap</h4><p>每个额外的 loader/plugin 都有启动时间。尽量少使用不同的工具。</p><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h4><p>以下几步可以提供解析速度:</p><ul><li>尽量减少 <code>resolve.modules</code>, <code>resolve.extensions</code>, <code>resolve.mainFiles</code>, <code>resolve.descriptionFiles</code> 中类目的数量，因为他们会增加文件系统调用的次数。</li><li>如果你不使用 symlinks ，可以设置 <code>resolve.symlinks: false</code> (例如 <code>npm link</code> 或者 <code>yarn link</code>).</li><li>如果你使用自定义解析 plugins ，并且没有指定 context 信息，可以设置 <code>resolve.cacheWithContext: false</code> 。</li></ul><h4 id="dlls" tabindex="-1"><a class="header-anchor" href="#dlls" aria-hidden="true">#</a> Dlls</h4><p>使用 <code>DllPlugin</code> 将更改不频繁的代码进行单独编译。这将改善引用程序的编译速度，即使它增加了构建过程的复杂性。</p><h4 id="smaller-faster" tabindex="-1"><a class="header-anchor" href="#smaller-faster" aria-hidden="true">#</a> Smaller = Faster</h4><p>减少编译的整体大小，以提高构建性能。尽量保持 chunks 小巧。</p><ul><li>使用 更少/更小 的库。</li><li>在多页面应用程序中使用 <code>CommonsChunksPlugin</code>。</li><li>在多页面应用程序中以 <code>async</code> 模式使用 <code>CommonsChunksPlugin</code> 。</li><li>移除不使用的代码。</li><li>只编译你当前正在开发部分的代码。</li></ul><h4 id="worker-pool" tabindex="-1"><a class="header-anchor" href="#worker-pool" aria-hidden="true">#</a> Worker Pool</h4><p><code>thread-loader</code> 可以将非常消耗资源的 loaders 转存到 worker pool 中。</p><blockquote><p>不要使用太多的 workers ，因为 Node.js 的 runtime 和 loader 有一定的启动开销。最小化 workers 和主进程间的模块传输。进程间通讯(IPC)是非常消耗资源的。</p></blockquote><h4 id="持久化缓存" tabindex="-1"><a class="header-anchor" href="#持久化缓存" aria-hidden="true">#</a> 持久化缓存</h4><p>使用 <code>cache-loader</code> 启用持久化缓存。使用 <code>package.json</code> 中的 <code>&quot;postinstall&quot;</code> 清除缓存目录。</p><h4 id="自定义-plugins-loaders" tabindex="-1"><a class="header-anchor" href="#自定义-plugins-loaders" aria-hidden="true">#</a> 自定义 plugins/loaders</h4><p>这里不对它们配置的性能问题作过多赘述。</p><h2 id="development" tabindex="-1"><a class="header-anchor" href="#development" aria-hidden="true">#</a> Development</h2><p>下面步骤对于 <em>development</em> 特别有用。</p><h3 id="增量编译" tabindex="-1"><a class="header-anchor" href="#增量编译" aria-hidden="true">#</a> 增量编译</h3><p>使用 webpack 的监听模式。不要使用其他工具来监听你的文件和调用 webpack 。在监听模式下构建会记录时间戳并将信息传递给编译让缓存失效。</p><p>在某些设置中，监听会回退到轮询模式。有许多监听文件会导致 CPU 大量负载。在这些情况下，你可以使用 <code>watchOptions.poll</code> 来增加轮询的间隔。</p><h3 id="在内存中编译" tabindex="-1"><a class="header-anchor" href="#在内存中编译" aria-hidden="true">#</a> 在内存中编译</h3><p>以下几个实用工具通过在内存中进行代码的编译和资源的提供，但并不写入磁盘来提高性能:</p><ul><li><code>webpack-dev-server</code></li><li><code>webpack-hot-middleware</code></li><li><code>webpack-dev-middleware</code></li></ul><h3 id="devtool" tabindex="-1"><a class="header-anchor" href="#devtool" aria-hidden="true">#</a> Devtool</h3><p>需要注意的是不同的 <code>devtool</code> 的设置，会导致不同的性能差异。</p><ul><li><code>&quot;eval&quot;</code> 具有最好的性能，但并不能帮助你转译代码。</li><li>如果你能接受稍差一些的 mapping 质量，可以使用 <code>cheap-source-map</code> 选项来提高性能</li><li>使用 <code>eval-source-map</code> 配置进行增量编译。</li></ul><p>=&gt; 在大多数情况下，<code>cheap-module-eval-source-map</code> 是最好的选择。</p><h3 id="避免在生产环境下才会用到的工具" tabindex="-1"><a class="header-anchor" href="#避免在生产环境下才会用到的工具" aria-hidden="true">#</a> 避免在生产环境下才会用到的工具</h3><p>某些实用工具， plugins 和 loaders 都只能在构建生产环境时才有用。例如，在开发时使用 <code>UglifyJsPlugin</code> 来压缩和修改代码是没有意义的。以下这些工具在开发中通常被排除在外:</p><ul><li><code>UglifyJsPlugin</code></li><li><code>ExtractTextPlugin</code></li><li><code>[hash]</code>/<code>[chunkhash]</code></li><li><code>AggressiveSplittingPlugin</code></li><li><code>AggressiveMergingPlugin</code></li><li><code>ModuleConcatenationPlugin</code></li></ul><h3 id="最小化入口-chunk" tabindex="-1"><a class="header-anchor" href="#最小化入口-chunk" aria-hidden="true">#</a> 最小化入口 chunk</h3><p>webpack 只会在文件系统中生成已经更新的 chunk 。对于某些配置选项(HMR, <code>[name]</code>/<code>[chunkhash]</code> in <code>output.chunkFilename</code>, <code>[hash]</code>)来说，除了更新的 chunks 无效之外，入口 chunk 也不会生效。</p><p>应当在生成入口 chunk 时，尽量减少入口 chunk 的体积，以提高性能。下述代码块将只提取包含 runtime 的 chunk ，<em>其他 chunk 都作为子模块</em>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;manifest&quot;</span><span class="token punctuation">,</span>\n  minChunks<span class="token operator">:</span> <span class="token number">Infinity</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="production" tabindex="-1"><a class="header-anchor" href="#production" aria-hidden="true">#</a> Production</h2><p>以下步骤在 <em>production</em> 中非常有用。</p><blockquote><p><strong>不要为了非常小的性能增益，牺牲你应用程序的质量！</strong> 请注意，优化代码质量在大多数情况下比构建性能更重要。</p></blockquote><h3 id="多个编译时" tabindex="-1"><a class="header-anchor" href="#多个编译时" aria-hidden="true">#</a> 多个编译时</h3><p>当进行多个编译时，以下工具可以帮助到你:</p>',47),Wa={href:"https://github.com/trivago/parallel-webpack",target:"_blank",rel:"noopener noreferrer"},Ca=(0,e._)("code",null,"parallel-webpack",-1),Pa=(0,e.Uk)(": 它允许编译工作在 worker 池中进行。"),Sa=(0,e._)("li",null,[(0,e._)("code",null,"cache-loader"),(0,e.Uk)(": 缓存可以在多个编译时之间共享。")],-1),Ea=(0,e.uE)('<h3 id="source-maps" tabindex="-1"><a class="header-anchor" href="#source-maps" aria-hidden="true">#</a> Source Maps</h3><p>Source maps 真的很消耗资源。你真的需要他们？</p><h2 id="工具相关问题" tabindex="-1"><a class="header-anchor" href="#工具相关问题" aria-hidden="true">#</a> 工具相关问题</h2><p>下列工具存在某些可能会降低构建性能的问题。</p><h3 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> Babel</h3><ul><li>项目中的 preset/plugins 数量最小化。</li></ul><h3 id="typescript-1" tabindex="-1"><a class="header-anchor" href="#typescript-1" aria-hidden="true">#</a> TypeScript</h3><ul><li>在单独的进程中使用 <code>fork-ts-checker-webpack-plugin</code> 进行类型检查。</li><li>配置 loaders 跳过类型检查。</li><li>使用 <code>ts-loader</code> 时，设置 <code>happyPackMode: true</code> / <code>transpileOnly: true</code>。</li></ul><h3 id="sass" tabindex="-1"><a class="header-anchor" href="#sass" aria-hidden="true">#</a> Sass</h3><ul><li><code>node-sass</code> 中有个来自 Node.js 线程池的阻塞线程的 bug。 当使用 <code>thread-loader</code> 时，需要设置 <code>workerParallelJobs: 2</code>。</li></ul><h2 id="集成" tabindex="-1"><a class="header-anchor" href="#集成" aria-hidden="true">#</a> 集成</h2>',11),Ha=(0,e.Uk)("首先我们要消除一个常见的误解。webpack 是一个模块打包器(module bundler)（例如，"),Ma={href:"http://browserify.org/",target:"_blank",rel:"noopener noreferrer"},Ja=(0,e.Uk)("Browserify"),Ta=(0,e.Uk)(" 或 "),Na={href:"http://brunch.io/",target:"_blank",rel:"noopener noreferrer"},Da=(0,e.Uk)("Brunch"),Oa=(0,e.Uk)("）。它不是一个任务执行器(task runner)（例如，"),Aa={href:"https://www.gnu.org/software/make/",target:"_blank",rel:"noopener noreferrer"},za=(0,e.Uk)("Make"),Ga=(0,e.Uk)(", "),$a={href:"https://gruntjs.com/",target:"_blank",rel:"noopener noreferrer"},La=(0,e.Uk)("Grunt"),Ia=(0,e.Uk)(" 或者 "),Ba={href:"https://gulpjs.com/",target:"_blank",rel:"noopener noreferrer"},Fa=(0,e.Uk)("Gulp"),Ra=(0,e.Uk)(" ）。任务执行器就是用来自动化处理常见的开发任务，例如项目的检查(lint)、构建(build)、测试(test)。相对于"),Va=(0,e._)("em",null,"打包器(bundler)",-1),Ya=(0,e.Uk)("，任务执行器则聚焦在偏重上层的问题上面。你可以得益于，使用上层的工具，而将打包部分的问题留给 webpack。"),Xa=(0,e.Uk)("打包器(bundler)帮助你取得准备用于部署的 JavaScript 和样式表，将它们转换为适合浏览器的可用格式。例如，JavaScript 可以"),Qa={href:"https://www.webpackjs.com/plugins/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},Ka=(0,e.Uk)("压缩"),Za=(0,e.Uk)("、"),ne={href:"https://www.webpackjs.com/guides/code-splitting",target:"_blank",rel:"noopener noreferrer"},se=(0,e.Uk)("拆分 chunk"),ae=(0,e.Uk)(" 和"),ee={href:"https://www.webpackjs.com/guides/lazy-loading",target:"_blank",rel:"noopener noreferrer"},pe=(0,e.Uk)("懒加载"),le=(0,e.Uk)("，以提高性能。打包是 web 开发中最重要的挑战之一，解决此问题可以消除开发过程中的大部分痛点。"),ce=(0,e._)("h3",{id:"npm-scripts",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#npm-scripts","aria-hidden":"true"},"#"),(0,e.Uk)(" NPM Scripts")],-1),re=(0,e.Uk)("通常 webpack 用户使用 npm "),te={href:"https://docs.npmjs.com/misc/scripts",target:"_blank",rel:"noopener noreferrer"},ie=(0,e._)("code",null,"scripts",-1),oe=(0,e.Uk)(" 来作为任务执行器。这是比较好的开始。然而跨平台支持是一个问题，为此有一些解决方案。许多用户，但不是大多数用户，直接使用 npm "),ue=(0,e._)("code",null,"scripts",-1),de=(0,e.Uk)(" 和各种级别的 webpack 配置和工具，来应对构建任务。"),ke=(0,e._)("p",null,"因此，当 webpack 的核心焦点专注于打包时，有多种扩展可以供你使用，可以将其用于任务运行者常见的工作。集成一个单独的工具会增加复杂度，所以一定要权衡集成前后的利弊。",-1),be=(0,e._)("h3",{id:"grunt",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#grunt","aria-hidden":"true"},"#"),(0,e.Uk)(" Grunt")],-1),me=(0,e.Uk)("对于那些使用 Grunt 的人，我们推荐使用 "),he={href:"https://www.npmjs.com/package/grunt-webpack",target:"_blank",rel:"noopener noreferrer"},ge=(0,e._)("code",null,"grunt-webpack",-1),fe=(0,e.Uk)(" 包(package)。使用 "),xe=(0,e._)("code",null,"grunt-webpack",-1),ve=(0,e.Uk)(" 你可以将 webpack 或 "),we={href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"},_e=(0,e.Uk)("webpack-dev-server"),qe=(0,e.Uk)(" 作为一项任务(task)执行，访问"),Ue={href:"https://gruntjs.com/api/grunt.template",target:"_blank",rel:"noopener noreferrer"},je=(0,e.Uk)("模板标签(template tags)"),ye=(0,e.Uk)("中的统计信息，拆分开发和生产配置等等。如果你还没有安装过 "),We=(0,e._)("code",null,"grunt-webpack",-1),Ce=(0,e.Uk)(" 和 "),Pe=(0,e._)("code",null,"webpack",-1),Se=(0,e.Uk)("，请先安装它们："),Ee=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev grunt-webpack webpack\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后注册一个配置并加载任务：</p><p><strong>Gruntfile.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">grunt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  grunt<span class="token punctuation">.</span><span class="token function">initConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    webpack<span class="token operator">:</span> <span class="token punctuation">{</span>\n      options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        stats<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      prod<span class="token operator">:</span> webpackConfig<span class="token punctuation">,</span>\n      dev<span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> watch<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  grunt<span class="token punctuation">.</span><span class="token function">loadNpmTasks</span><span class="token punctuation">(</span><span class="token string">&#39;grunt-webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',4),He=(0,e.Uk)("获取更多信息，请查看"),Me={href:"https://github.com/webpack-contrib/grunt-webpack",target:"_blank",rel:"noopener noreferrer"},Je=(0,e.Uk)("本仓库"),Te=(0,e.Uk)("。"),Ne=(0,e._)("h3",{id:"gulp",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#gulp","aria-hidden":"true"},"#"),(0,e.Uk)(" Gulp")],-1),De=(0,e.Uk)("在 "),Oe={href:"https://github.com/shama/webpack-stream",target:"_blank",rel:"noopener noreferrer"},Ae=(0,e._)("code",null,"webpack-stream",-1),ze=(0,e.Uk)(" 包(package)（也称作 "),Ge=(0,e._)("code",null,"gulp-webpack",-1),$e=(0,e.Uk)("） 的帮助下，也可以很简单方便的将 Gulp 与 webpack 集成。在这种情况下，不需要单独安装 "),Le=(0,e._)("code",null,"webpack",-1),Ie=(0,e.Uk)(" ，因为它是 "),Be=(0,e._)("code",null,"webpack-stream",-1),Fe=(0,e.Uk)(" 直接依赖："),Re=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev webpack-stream\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只需要把 <code>webpack</code> 替换为 <code>require(&#39;webpack-stream&#39;)</code>，并传递一个配置文件就可以了：</p><p><strong>gulpfile.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gulp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ngulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&#39;src/entry.js&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">webpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token comment">// 一些配置选项……</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&#39;dist/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',4),Ve={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("blockquote",null,[(0,e._)("p",null,[l,c,(0,e._)("a",r,[t,(0,e.Wm)(a)]),i,o,u,(0,e._)("a",d,[k,(0,e.Wm)(a)]),b])]),m,(0,e._)("p",null,[h,g,f,(0,e._)("a",x,[v,(0,e.Wm)(a)]),w]),(0,e._)("p",null,[_,(0,e._)("a",q,[U,(0,e.Wm)(a)]),j]),y,(0,e._)("p",null,[W,(0,e._)("a",C,[P,(0,e.Wm)(a)]),S,E,H]),(0,e._)("p",null,[M,(0,e._)("a",J,[T,(0,e.Wm)(a)]),N]),D,(0,e._)("p",null,[O,A,(0,e._)("a",z,[G,(0,e.Wm)(a)]),$]),L,(0,e._)("p",null,[I,(0,e._)("a",B,[F,(0,e.Wm)(a)]),R]),V,(0,e._)("p",null,[Y,X,Q,K,Z,(0,e._)("a",nn,[sn,(0,e.Wm)(a)]),an]),en,(0,e._)("p",null,[pn,(0,e._)("a",ln,[cn,(0,e.Wm)(a)]),rn,tn,on,un,dn,kn,bn,mn,hn]),gn,(0,e._)("p",null,[fn,xn,vn,(0,e._)("a",wn,[_n,(0,e.Wm)(a)]),qn,Un,jn,(0,e._)("a",yn,[Wn,(0,e.Wm)(a)]),Cn,Pn,Sn,En,Hn]),Mn,Jn,Tn,(0,e._)("ul",null,[(0,e._)("li",null,[Nn,(0,e._)("a",Dn,[On,(0,e.Wm)(a)]),An]),(0,e._)("li",null,[zn,(0,e._)("a",Gn,[$n,(0,e.Wm)(a)]),Ln]),In]),Bn,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Fn,[Rn,(0,e.Wm)(a)]),Vn]),(0,e._)("li",null,[(0,e._)("a",Yn,[Xn,(0,e.Wm)(a)]),Qn]),(0,e._)("li",null,[(0,e._)("a",Kn,[Zn,(0,e.Wm)(a)]),ns,ss,as])]),(0,e._)("p",null,[(0,e._)("a",es,[ps,(0,e.Wm)(a)]),ls,(0,e._)("a",cs,[rs,(0,e.Wm)(a)]),ts]),is,(0,e._)("p",null,[os,(0,e._)("a",us,[ds,(0,e.Wm)(a)]),ks]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",bs,[ms,(0,e.Wm)(a)]),hs]),(0,e._)("li",null,[(0,e._)("a",gs,[fs,(0,e.Wm)(a)]),xs]),(0,e._)("li",null,[(0,e._)("a",vs,[ws,(0,e.Wm)(a)]),_s])]),qs,(0,e._)("p",null,[Us,js,ys,Ws,Cs,(0,e._)("a",Ps,[Ss,(0,e.Wm)(a)]),Es,Hs]),Ms,(0,e._)("p",null,[Js,(0,e._)("a",Ts,[Ns,(0,e.Wm)(a)])]),Ds,(0,e._)("p",null,[Os,(0,e._)("a",As,[zs,(0,e.Wm)(a)]),Gs]),(0,e._)("p",null,[$s,(0,e._)("a",Ls,[Is,(0,e.Wm)(a)]),Bs]),Fs,(0,e._)("p",null,[(0,e._)("a",Rs,[Vs,(0,e.Wm)(a)]),Ys]),Xs,(0,e._)("p",null,[(0,e._)("a",Qs,[Ks,(0,e.Wm)(a)])]),Zs,(0,e._)("p",null,[na,(0,e._)("a",sa,[aa,(0,e.Wm)(a)]),ea]),pa,(0,e._)("p",null,[la,(0,e._)("a",ca,[ra,(0,e.Wm)(a)]),ta,ia,oa,ua,da,ka,ba,ma,ha]),ga,fa,(0,e._)("p",null,[xa,(0,e._)("a",va,[wa,(0,e.Wm)(a)]),_a,(0,e._)("a",qa,[Ua,(0,e.Wm)(a)]),ja]),ya,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Wa,[Ca,(0,e.Wm)(a)]),Pa]),Sa]),Ea,(0,e._)("p",null,[Ha,(0,e._)("a",Ma,[Ja,(0,e.Wm)(a)]),Ta,(0,e._)("a",Na,[Da,(0,e.Wm)(a)]),Oa,(0,e._)("a",Aa,[za,(0,e.Wm)(a)]),Ga,(0,e._)("a",$a,[La,(0,e.Wm)(a)]),Ia,(0,e._)("a",Ba,[Fa,(0,e.Wm)(a)]),Ra,Va,Ya]),(0,e._)("p",null,[Xa,(0,e._)("a",Qa,[Ka,(0,e.Wm)(a)]),Za,(0,e._)("a",ne,[se,(0,e.Wm)(a)]),ae,(0,e._)("a",ee,[pe,(0,e.Wm)(a)]),le]),ce,(0,e._)("p",null,[re,(0,e._)("a",te,[ie,(0,e.Wm)(a)]),oe,ue,de]),ke,be,(0,e._)("p",null,[me,(0,e._)("a",he,[ge,(0,e.Wm)(a)]),fe,xe,ve,(0,e._)("a",we,[_e,(0,e.Wm)(a)]),qe,(0,e._)("a",Ue,[je,(0,e.Wm)(a)]),ye,We,Ce,Pe,Se]),Ee,(0,e._)("p",null,[He,(0,e._)("a",Me,[Je,(0,e.Wm)(a)]),Te]),Ne,(0,e._)("p",null,[De,(0,e._)("a",Oe,[Ae,(0,e.Wm)(a)]),ze,Ge,$e,Le,Ie,Be,Fe]),Re],64)}}}}]);