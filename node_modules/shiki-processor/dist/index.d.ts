import { HtmlRendererOptions, Highlighter, HighlighterOptions as HighlighterOptions$1 } from 'shiki';

declare type LineOptions = NonNullable<HtmlRendererOptions['lineOptions']>;
interface ProcessorResult {
    code: string;
    lineOptions: LineOptions;
}
declare type PostProcessorResult = string | undefined;
interface TagClassesDictionary {
    [tag: string]: string[];
}
interface ProcessorOptions {
    code: string;
    lang: string;
}
declare type ProcessorHandler = (options: ProcessorOptions) => ProcessorResult;
declare type PostProcessorHandler = (options: ProcessorOptions) => PostProcessorResult;
interface Processor {
    name: string;
    handler?: ProcessorHandler;
    postProcess?: PostProcessorHandler;
}

interface RangeProcessorOptions {
    tagRegExp?: RegExp;
}
declare function createRangeProcessor(dictionary: TagClassesDictionary, options?: RangeProcessorOptions): ProcessorHandler;

interface DiffProcessorOptions extends RangeProcessorOptions {
    commonDiffClass?: string;
    removedLinesClasses?: string[];
    addedLinesClasses?: string[];
    removeLineTag?: string;
    addLineTag?: string;
    hasDiffClass?: string;
}
declare function createDiffProcessor(options?: DiffProcessorOptions): Processor;

interface FocusProcessorOptions extends RangeProcessorOptions {
    hasFocusedLinesClass?: string;
    hasFocusClass?: string;
    focusTag?: string;
}
declare function createFocusProcessor(options?: FocusProcessorOptions): Processor;

interface HighlightProcessorOptions extends RangeProcessorOptions {
    hasHighlightedLinesClass?: string;
    hasHighlightClass?: string;
    highlightTag?: string;
}
declare function createHighlightProcessor(options?: HighlightProcessorOptions): Processor;

declare function addClass(code: string, classes: string | string[], tag?: string): string;

/**
 * Defines a processor.
 */
declare function defineProcessor(processor: Processor): Processor;
/**
 * Transforms code through the given processors.
 */
declare function process(processors: Processor[], code: string, lang: string): ProcessorResult;
/**
 * Transforms final code through the given processors.
 */
declare function postProcess(processors: Processor[], code: string, lang: string): string;

interface HighlighterOptions extends HighlighterOptions$1 {
    processors?: Processor[];
}
declare function getHighlighter(options?: HighlighterOptions): Promise<Highlighter>;

export { DiffProcessorOptions, FocusProcessorOptions, HighlightProcessorOptions, LineOptions, PostProcessorHandler, PostProcessorResult, Processor, ProcessorHandler, ProcessorOptions, ProcessorResult, RangeProcessorOptions, TagClassesDictionary, addClass, createDiffProcessor, createFocusProcessor, createHighlightProcessor, createRangeProcessor, defineProcessor, getHighlighter, postProcess, process };
